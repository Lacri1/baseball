{"ast":null,"code":"var _jsxFileName = \"C:\\\\20\\\\homepage\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const useUser = () => {\n  _s();\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n_s(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkLoginStatus();\n  }, []);\n  const checkLoginStatus = async () => {\n    try {\n      const result = await authService.checkLoginStatus();\n      if (result.isLoggedIn) {\n        setUser(result.user);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Failed to check login status:', error);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (id, pw) => {\n    try {\n      const result = await authService.login(id, pw);\n      if (result.success) {\n        setUser(result.user);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: result.message\n        };\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      return {\n        success: false,\n        message: '로그인 중 오류가 발생했습니다.'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      const result = await authService.logout();\n      if (result.success) {\n        setUser(null);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: '로그아웃 중 오류가 발생했습니다.'\n        };\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n      return {\n        success: false,\n        message: '로그아웃 중 오류가 발생했습니다.'\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    checkLoginStatus\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","UserContext","useUser","_s","context","Error","UserProvider","children","_s2","user","setUser","loading","setLoading","checkLoginStatus","result","isLoggedIn","error","console","login","id","pw","success","message","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/20/homepage/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authService } from '../services/authService';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within a UserProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    checkLoginStatus();\r\n  }, []);\r\n\r\n  const checkLoginStatus = async () => {\r\n    try {\r\n      const result = await authService.checkLoginStatus();\r\n      if (result.isLoggedIn) {\r\n        setUser(result.user);\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to check login status:', error);\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (id, pw) => {\r\n    try {\r\n      const result = await authService.login(id, pw);\r\n      if (result.success) {\r\n        setUser(result.user);\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, message: result.message };\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      return { success: false, message: '로그인 중 오류가 발생했습니다.' };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const result = await authService.logout();\r\n      if (result.success) {\r\n        setUser(null);\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, message: '로그아웃 중 오류가 발생했습니다.' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n      return { success: false, message: '로그아웃 중 오류가 발생했습니다.' };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    checkLoginStatus\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}